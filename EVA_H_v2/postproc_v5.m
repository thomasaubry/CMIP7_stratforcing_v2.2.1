% 	Written by Thomas J. Aubry, July 2025.
% 	Department of Earth Sciences, University of Oxford, UK
%   E-mail: thomas.aubry@earth.ox.ac.uk
% 	Please cite the corresponding papers if you use or modify this script,
%   i.e. both the original EVA_H paper (Aubry et al., JGR 2020) and the CMIP7
%   dataset paper documenting version 2 of EVA_H

function [gmsaod, saod, reff, ext, ssa, asy, lat, alt, sad, vd, nd, gm_reff]=postproc_v5(SO4mass,ext525_backg,modelpara,mstar,R_reff,wl_req,miename)
%see CMIP paper for variable output name definitions
%This functions returns key aerosol (optical) properties at wavelength wl_req (in um)
% from volcanic SO4 mass generated by EVA_H v2 (SO4mass), a background non-volcanic extionction at 525 nm (ext525_backg), EVA_H
% model parameters (modelpara, mstar, R_reff), and the Mie lookup table
% miename

%==========================================================================
%0) Defining some useful parameters
%==========================================================================
%density of sulfate aerosol in kg/m3 at 215K and 0.75wt%
%(https://doi.org/10.1038/s41598-019-52089-6)
rho_aer=(-0.4845-0.7074*0.75)*215+1186.1+ 621.4*0.75+ 573.54*0.75*0.75;
%in g/um3 this is:
rho_aer=rho_aer*1000/(1000000^3);
%Avogadro's number (in /mol)
n_av=6.02214*10^23;
%sulfuric acid concentration in aerosol (mass fraction)
wf_h2so4=0.75;
%molar mass h2so4 in g/mol
mm_h2so4=98.079;
%the number concentration nd of h2so4 in (molecules h2so4/cm3 air), given the
%volume density of aerosol vd in um3 aerosol/cm3 air is then
%nd=(vd*rho_aer*0.75)*n_av/mm_h2so4;


%==========================================================================
%1) Calculate global mean SAOD and area-weighted AOD at 525nm, and
%aerosol effective radius
%==========================================================================
totmass=sum(SO4mass,2);%total mass of sulfate in the stratosphere
gmsaod525_lin=modelpara(1)*totmass;%global mean SAOD at 525nm calculated
%using the linear scaling

gmsaod525=gmsaod525_lin;
gmsaod525(totmass>mstar)=modelpara(1)*mstar^(1/3)*totmass(totmass>mstar).^(2/3);
%global mean SAOD at 525nm with 2/3 scaling applied for sulfate mass larger
%than the critical mass mstar.

waod=modelpara(1)*SO4mass.*repmat(gmsaod525./gmsaod525_lin,[1 8]);
%area-weighted AOD at 525nm in each box, calculated as the mass of sulfate
%in each box multiplied by the SAOD-sulfate mass scaling factor, and
%corrected by the ratio of the actual global mean SAOD at 525nm and the
%obtained from a linear scaling. This correction insures that the sum of
%area-weighted AOD in all boxes is equal to the global mean SAOD.

gmreff=max(0.115,R_reff*totmass.^(1/3));
%Calculate global mean mass-weighted effective radius in um from the
%scaling described in the companion paper.


load('shapefunctions.mat')
%load shape functions
%Matlab is stupid and thinks that sum of NaN values is 0... so replace
%values by NaNs in outputs where shapefunctions are NaN
shapemask=squeeze(sum(isnan(shapefunctions),3));
shapemask(shapemask<8)=0;
shapemask(shapemask==8)=NaN;
shapemask=permute(repmat(shapemask,[1 1 length(wl_req) length(totmass)]),[4 1 2 3]);
%NOTE: shape functions were not recalibrated from EVA_H v1 to v2, too much
%higher priority stuff for CMIP7 and likely no major recalibration
%required...but should be done in the future


%==========================================================================
%2) Calculate altitude and latitude dependent extinction at 525nm and
%effective radius
%==========================================================================


%define latitude/altitude grid of the shape functions
lat=(-87.5:5:87.5)';
alt=(5:0.5:39.5)';

ext525=NaN(length(totmass),36,70);%pre-allocate space for extinction at 525nm
massdist=NaN(length(totmass),36,70);%pre-allocate space for sulfate mass
for i=1:length(totmass)
    %At each timestep, calculate the extinction at 525nm as the sum, over the
    %8 boxes, of the product of the area-weighted AOD in the box by the shape
    %function of the same box (cf. companion paper for more details on these
    %shape functions and how they were derived). The shape functions return
    %extinction in /km
    ext525(i,:,:)=squeeze(sum(permute(repmat(waod(i,:)',[1 36 70]),[2 3 1]).*shapefunctions,3,'omitmissing'));

end

%add background extinction to extinction (new to EVA_H v2)
ext525_backg(isnan(ext525_backg(:)))=0;
ext525=ext525+ext525_backg;


%Assume that local effective radius follows the same spatial distribution
%as mass conc raised to power 1/3, and that mass conc scales linearly with extinction.
reff=ext525.^(1/3);
reff_forscale=reff+squeeze(shapemask(:,:,:,1));

%Re-scale the effective radius so that the global mean average follows the
%scaling introduced in the paper, with a minimum value of 0.06um for local
%effective radius (new to EVA_H v2)

gmreff_scale=squeeze(mean(reff_forscale,3,'omitnan'));
latweight=repmat(cosd(lat)/sum(cosd(lat)),[1 length(totmass)])';
gmreff_scale=sum(latweight.*gmreff_scale,2);
reff=0.06+reff.*repmat((gmreff-0.06)./gmreff_scale,[1 36 70]);

gm_reff=squeeze(mean(reff,3,'omitnan'));
gm_reff=sum(latweight.*gmreff,2);


%==========================================================================
%3) Calculate time, altitude, latitude and wavelength dependent extinction,
%stratospheric aerosol optical depth, single scattering albedo and
%scattering asymmetry factor
%==========================================================================


%a) Read effective radius and wavelength grid from Mie file
reffgrid_mie = varfromname(miename,'reff',-999);
wlgrid_mie = varfromname(miename,'wl',-999);

%b) Read calculated parameters, which are 2D array, with one dimension for
%effective radius and the other one for wavelength.
extrat_mie = varfromname(miename,'extrat',-999);%ratio of extinction to extinction at 550nm (EXT)
ssa_mie = varfromname(miename,'ssa',-999);%single scattering albedo (SSA)
asy_mie = varfromname(miename,'asy',-999);%scattering asymmetry factor (ASY)
sad_mie = varfromname(miename,'sad_unit',-999);%scattering asymmetry factor (ASY)
vad_mie = varfromname(miename,'vol_unit',-999);%scattering asymmetry factor (ASY)
ecs_mie = varfromname(miename,'ecs',-999);%effective cross section


%Mie files are not always perfect so a bit of pre-processing. Note when
% values outside physical range occur, they are only just outside this
% range and are likely interpolation or rounding errors

%Filter any effective radius with negative values of positively defined
%ecs, vad, sad and reff
maskmie=ecs_mie>0 & vad_mie>0 & sad_mie>0;
reffgrid_mie=reffgrid_mie(maskmie);
extrat_mie=extrat_mie(maskmie,:);
ssa_mie=ssa_mie(maskmie,:);
asy_mie=asy_mie(maskmie,:);
sad_mie=sad_mie(maskmie);
vad_mie=vad_mie(maskmie);
ecs_mie=ecs_mie(maskmie);

%Mie file not always perfect so assume negative values of positively
%defined variables are zero, and ssa above 1 are 1.
extrat_mie(extrat_mie<0)=0;
ssa_mie(ssa_mie<0)=0;
ssa_mie(ssa_mie>1)=1;
asy_mie(asy_mie<0)=0;

[Xwl,Yreff] = meshgrid(wlgrid_mie,reffgrid_mie);

%Assume Reff values outside Mie file range are max or min of reff in mie
%file
reff(reff(:)>max(reffgrid_mie))=max(reffgrid_mie);
reff(reff(:)<min(reffgrid_mie))=min(reffgrid_mie);

%preallocate memory for calculating EXT, SSA and ASY
ext=NaN(size(ext525,1),size(ext525,2),size(ext525,3),length(wl_req));
ssa=NaN(size(ext));
asy=NaN(size(ext));
sad=NaN(size(squeeze(ext(:,:,:,1))));
vd=NaN(size(squeeze(ext(:,:,:,1))));
nd=NaN(size(squeeze(ext(:,:,:,1))));


%c) Loop through latitude, altitude and wavelength to calculate them. All
%calculations are done by linearly interpolating the Mie lookup tables at
%the requested wavelength and the effective radius outputted by the model.
for ilat=1:length(lat)
    for ialt=1:length(alt)
        for iwl=1:length(wl_req)
            %ignore points in time where the extinction at 525nm or
            %effective radius are NaNs
            mask=~isnan(squeeze(ext525(:,ilat,ialt))) & ~isnan(squeeze(reff(:,ilat,ialt)));

            if sum(~mask)>0;toto;end%Calculate the raio of extinction at desired wavelength to
            %extinction at 525nm
            ratio525=interp2(Xwl,Yreff,extrat_mie,wl_req(iwl),reff(mask,ilat,ialt))./interp2(Xwl,Yreff,extrat_mie,0.525,reff(mask,ilat,ialt));
            %multiple above ratio by extinction at 525nm

            ext(mask,ilat,ialt,iwl)=ext525(mask,ilat,ialt).*ratio525;
            %calculate SSA and ASY
            ssa(mask,ilat,ialt,iwl)=interp2(Xwl,Yreff,ssa_mie,wl_req(iwl),reff(mask,ilat,ialt));
            asy(mask,ilat,ialt,iwl)=interp2(Xwl,Yreff,asy_mie,wl_req(iwl),reff(mask,ilat,ialt));



        end
        %cross section in mum^2
        i550=find(wl_req==0.55);
        % ecs=interp1(reffgrid_mie,ecs_mie,reff(mask,ilat,ialt));
        %numbconc=1000.*squeeze(ext(mask,ilat,ialt,i550))./ecs; % Sujan Khanal: number concentration (No, per cc) as: 1000*ext550nm/ecs. Here, ext550nm is in per km, ecs is the effective cross section from the LUT and 1000 is a factor to make the units work
        %ext above is in km so consistent with SUjan's formula
        %sad and vd from mie files need to be multiplied by number
        %concentration
        sad(mask,ilat,ialt)=interp1(reffgrid_mie,sad_mie./ecs_mie,reff(mask,ilat,ialt)).*1000.*squeeze(ext(mask,ilat,ialt,i550));
        vd(mask,ilat,ialt)=interp1(reffgrid_mie,vad_mie./ecs_mie,reff(mask,ilat,ialt)).*1000.*squeeze(ext(mask,ilat,ialt,i550));
        nd(mask,ilat,ialt)=(vd(mask,ilat,ialt)*rho_aer*0.75)*n_av/mm_h2so4;


    end
end


%Calculate stratospheric aerosol optical depth. These are simply the sum of
%extinction along vertical dimension, multiplied by 0.5 because the
%vertical grid is regurlarly spaced by 0.5km. All tropospheric values are
%NaNs in the shape functions and thus in ext.
saod=squeeze(sum(ext,3,'omitmissing')*0.5);

%Calculate weights (cosinus(latitude)) for calculating global mean
latweight=permute(repmat(cosd(lat),[1 length(wl_req) length(totmass)]),[3 1 2]);
latweight=latweight/squeeze(sum(latweight(1,:,1),2));
%Calculate global mean SAOD
gmsaod=squeeze(sum(saod.*latweight,2,'omitmissing'));


%add NaN if all shape functions are NaNs to make NaN; add 0 otherwise
reff=reff+squeeze(shapemask(:,:,:,1));
sad=sad+squeeze(shapemask(:,:,:,1));
vd=vd+squeeze(shapemask(:,:,:,1));
nd=nd+squeeze(shapemask(:,:,:,1));
ext=ext+shapemask;
ssa=ssa+shapemask;
asy=asy+shapemask;


end